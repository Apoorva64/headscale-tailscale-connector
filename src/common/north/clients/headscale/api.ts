/* tslint:disable */
/* eslint-disable */
/**
 * headscale/v1/headscale.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface HeadscaleServiceSetTagsRequest
 */
export interface HeadscaleServiceSetTagsRequest {
  /**
   *
   * @type {Array<string>}
   * @memberof HeadscaleServiceSetTagsRequest
   */
  tags?: Array<string>;
}
/**
 *
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
  [key: string]: object | any;

  /**
   *
   * @type {string}
   * @memberof ProtobufAny
   */
  '@type'?: string;
}
/**
 *
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
  /**
   *
   * @type {number}
   * @memberof RpcStatus
   */
  code?: number;
  /**
   *
   * @type {string}
   * @memberof RpcStatus
   */
  message?: string;
  /**
   *
   * @type {Array<ProtobufAny>}
   * @memberof RpcStatus
   */
  details?: Array<ProtobufAny>;
}
/**
 *
 * @export
 * @interface V1ApiKey
 */
export interface V1ApiKey {
  /**
   *
   * @type {string}
   * @memberof V1ApiKey
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof V1ApiKey
   */
  prefix?: string;
  /**
   *
   * @type {string}
   * @memberof V1ApiKey
   */
  expiration?: string;
  /**
   *
   * @type {string}
   * @memberof V1ApiKey
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof V1ApiKey
   */
  lastSeen?: string;
}
/**
 *
 * @export
 * @interface V1CreateApiKeyRequest
 */
export interface V1CreateApiKeyRequest {
  /**
   *
   * @type {string}
   * @memberof V1CreateApiKeyRequest
   */
  expiration?: string;
}
/**
 *
 * @export
 * @interface V1CreateApiKeyResponse
 */
export interface V1CreateApiKeyResponse {
  /**
   *
   * @type {string}
   * @memberof V1CreateApiKeyResponse
   */
  apiKey?: string;
}
/**
 *
 * @export
 * @interface V1CreatePreAuthKeyRequest
 */
export interface V1CreatePreAuthKeyRequest {
  /**
   *
   * @type {string}
   * @memberof V1CreatePreAuthKeyRequest
   */
  user?: string;
  /**
   *
   * @type {boolean}
   * @memberof V1CreatePreAuthKeyRequest
   */
  reusable?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof V1CreatePreAuthKeyRequest
   */
  ephemeral?: boolean;
  /**
   *
   * @type {string}
   * @memberof V1CreatePreAuthKeyRequest
   */
  expiration?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof V1CreatePreAuthKeyRequest
   */
  aclTags?: Array<string>;
}
/**
 *
 * @export
 * @interface V1CreatePreAuthKeyResponse
 */
export interface V1CreatePreAuthKeyResponse {
  /**
   *
   * @type {V1PreAuthKey}
   * @memberof V1CreatePreAuthKeyResponse
   */
  preAuthKey?: V1PreAuthKey;
}
/**
 *
 * @export
 * @interface V1CreateUserRequest
 */
export interface V1CreateUserRequest {
  /**
   *
   * @type {string}
   * @memberof V1CreateUserRequest
   */
  name?: string;
}
/**
 *
 * @export
 * @interface V1CreateUserResponse
 */
export interface V1CreateUserResponse {
  /**
   *
   * @type {V1User}
   * @memberof V1CreateUserResponse
   */
  user?: V1User;
}
/**
 *
 * @export
 * @interface V1DebugCreateMachineRequest
 */
export interface V1DebugCreateMachineRequest {
  /**
   *
   * @type {string}
   * @memberof V1DebugCreateMachineRequest
   */
  user?: string;
  /**
   *
   * @type {string}
   * @memberof V1DebugCreateMachineRequest
   */
  key?: string;
  /**
   *
   * @type {string}
   * @memberof V1DebugCreateMachineRequest
   */
  name?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof V1DebugCreateMachineRequest
   */
  routes?: Array<string>;
}
/**
 *
 * @export
 * @interface V1DebugCreateMachineResponse
 */
export interface V1DebugCreateMachineResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1DebugCreateMachineResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @interface V1ExpireApiKeyRequest
 */
export interface V1ExpireApiKeyRequest {
  /**
   *
   * @type {string}
   * @memberof V1ExpireApiKeyRequest
   */
  prefix?: string;
}
/**
 *
 * @export
 * @interface V1ExpireMachineResponse
 */
export interface V1ExpireMachineResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1ExpireMachineResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @interface V1ExpirePreAuthKeyRequest
 */
export interface V1ExpirePreAuthKeyRequest {
  /**
   *
   * @type {string}
   * @memberof V1ExpirePreAuthKeyRequest
   */
  user?: string;
  /**
   *
   * @type {string}
   * @memberof V1ExpirePreAuthKeyRequest
   */
  key?: string;
}
/**
 *
 * @export
 * @interface V1GetMachineResponse
 */
export interface V1GetMachineResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1GetMachineResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @interface V1GetMachineRoutesResponse
 */
export interface V1GetMachineRoutesResponse {
  /**
   *
   * @type {Array<V1Route>}
   * @memberof V1GetMachineRoutesResponse
   */
  routes?: Array<V1Route>;
}
/**
 *
 * @export
 * @interface V1GetRoutesResponse
 */
export interface V1GetRoutesResponse {
  /**
   *
   * @type {Array<V1Route>}
   * @memberof V1GetRoutesResponse
   */
  routes?: Array<V1Route>;
}
/**
 *
 * @export
 * @interface V1GetUserResponse
 */
export interface V1GetUserResponse {
  /**
   *
   * @type {V1User}
   * @memberof V1GetUserResponse
   */
  user?: V1User;
}
/**
 *
 * @export
 * @interface V1ListApiKeysResponse
 */
export interface V1ListApiKeysResponse {
  /**
   *
   * @type {Array<V1ApiKey>}
   * @memberof V1ListApiKeysResponse
   */
  apiKeys?: Array<V1ApiKey>;
}
/**
 *
 * @export
 * @interface V1ListMachinesResponse
 */
export interface V1ListMachinesResponse {
  /**
   *
   * @type {Array<V1Machine>}
   * @memberof V1ListMachinesResponse
   */
  machines?: Array<V1Machine>;
}
/**
 *
 * @export
 * @interface V1ListPreAuthKeysResponse
 */
export interface V1ListPreAuthKeysResponse {
  /**
   *
   * @type {Array<V1PreAuthKey>}
   * @memberof V1ListPreAuthKeysResponse
   */
  preAuthKeys?: Array<V1PreAuthKey>;
}
/**
 *
 * @export
 * @interface V1ListUsersResponse
 */
export interface V1ListUsersResponse {
  /**
   *
   * @type {Array<V1User>}
   * @memberof V1ListUsersResponse
   */
  users?: Array<V1User>;
}
/**
 *
 * @export
 * @interface V1Machine
 */
export interface V1Machine {
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  machineKey?: string;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  nodeKey?: string;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  discoKey?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof V1Machine
   */
  ipAddresses?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  name?: string;
  /**
   *
   * @type {V1User}
   * @memberof V1Machine
   */
  user?: V1User;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  lastSeen?: string;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  lastSuccessfulUpdate?: string;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  expiry?: string;
  /**
   *
   * @type {V1PreAuthKey}
   * @memberof V1Machine
   */
  preAuthKey?: V1PreAuthKey;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  createdAt?: string;
  /**
   *
   * @type {V1RegisterMethod}
   * @memberof V1Machine
   */
  registerMethod?: V1RegisterMethod;
  /**
   *
   * @type {Array<string>}
   * @memberof V1Machine
   */
  forcedTags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof V1Machine
   */
  invalidTags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof V1Machine
   */
  validTags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof V1Machine
   */
  givenName?: string;
  /**
   *
   * @type {boolean}
   * @memberof V1Machine
   */
  online?: boolean;
}

/**
 *
 * @export
 * @interface V1MoveMachineResponse
 */
export interface V1MoveMachineResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1MoveMachineResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @interface V1PreAuthKey
 */
export interface V1PreAuthKey {
  /**
   *
   * @type {string}
   * @memberof V1PreAuthKey
   */
  user?: string;
  /**
   *
   * @type {string}
   * @memberof V1PreAuthKey
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof V1PreAuthKey
   */
  key?: string;
  /**
   *
   * @type {boolean}
   * @memberof V1PreAuthKey
   */
  reusable?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof V1PreAuthKey
   */
  ephemeral?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof V1PreAuthKey
   */
  used?: boolean;
  /**
   *
   * @type {string}
   * @memberof V1PreAuthKey
   */
  expiration?: string;
  /**
   *
   * @type {string}
   * @memberof V1PreAuthKey
   */
  createdAt?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof V1PreAuthKey
   */
  aclTags?: Array<string>;
}
/**
 *
 * @export
 * @interface V1RegisterMachineResponse
 */
export interface V1RegisterMachineResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1RegisterMachineResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @enum {string}
 */

export const V1RegisterMethod = {
  Unspecified: 'REGISTER_METHOD_UNSPECIFIED',
  AuthKey: 'REGISTER_METHOD_AUTH_KEY',
  Cli: 'REGISTER_METHOD_CLI',
  Oidc: 'REGISTER_METHOD_OIDC',
} as const;

export type V1RegisterMethod = (typeof V1RegisterMethod)[keyof typeof V1RegisterMethod];

/**
 *
 * @export
 * @interface V1RenameMachineResponse
 */
export interface V1RenameMachineResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1RenameMachineResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @interface V1RenameUserResponse
 */
export interface V1RenameUserResponse {
  /**
   *
   * @type {V1User}
   * @memberof V1RenameUserResponse
   */
  user?: V1User;
}
/**
 *
 * @export
 * @interface V1Route
 */
export interface V1Route {
  /**
   *
   * @type {string}
   * @memberof V1Route
   */
  id?: string;
  /**
   *
   * @type {V1Machine}
   * @memberof V1Route
   */
  machine?: V1Machine;
  /**
   *
   * @type {string}
   * @memberof V1Route
   */
  prefix?: string;
  /**
   *
   * @type {boolean}
   * @memberof V1Route
   */
  advertised?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof V1Route
   */
  enabled?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof V1Route
   */
  isPrimary?: boolean;
  /**
   *
   * @type {string}
   * @memberof V1Route
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof V1Route
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof V1Route
   */
  deletedAt?: string;
}
/**
 *
 * @export
 * @interface V1SetTagsResponse
 */
export interface V1SetTagsResponse {
  /**
   *
   * @type {V1Machine}
   * @memberof V1SetTagsResponse
   */
  machine?: V1Machine;
}
/**
 *
 * @export
 * @interface V1User
 */
export interface V1User {
  /**
   *
   * @type {string}
   * @memberof V1User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof V1User
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof V1User
   */
  createdAt?: string;
}

/**
 * HeadscaleServiceApi - axios parameter creator
 * @export
 */
export const HeadscaleServiceApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary --- ApiKeys start ---
     * @param {V1CreateApiKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceCreateApiKey: async (
      body: V1CreateApiKeyRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceCreateApiKey', 'body', body);
      const localVarPath = `/api/v1/apikey`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary --- PreAuthKeys start ---
     * @param {V1CreatePreAuthKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceCreatePreAuthKey: async (
      body: V1CreatePreAuthKeyRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceCreatePreAuthKey', 'body', body);
      const localVarPath = `/api/v1/preauthkey`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceCreateUser: async (
      body: V1CreateUserRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceCreateUser', 'body', body);
      const localVarPath = `/api/v1/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary --- Machine start ---
     * @param {V1DebugCreateMachineRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDebugCreateMachine: async (
      body: V1DebugCreateMachineRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceDebugCreateMachine', 'body', body);
      const localVarPath = `/api/v1/debug/machine`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDeleteMachine: async (
      machineId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceDeleteMachine', 'machineId', machineId);
      const localVarPath = `/api/v1/machine/{machineId}`.replace(
        `{${'machineId'}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDeleteRoute: async (routeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'routeId' is not null or undefined
      assertParamExists('headscaleServiceDeleteRoute', 'routeId', routeId);
      const localVarPath = `/api/v1/routes/{routeId}`.replace(`{${'routeId'}}`, encodeURIComponent(String(routeId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDeleteUser: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('headscaleServiceDeleteUser', 'name', name);
      const localVarPath = `/api/v1/user/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDisableRoute: async (
      routeId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'routeId' is not null or undefined
      assertParamExists('headscaleServiceDisableRoute', 'routeId', routeId);
      const localVarPath = `/api/v1/routes/{routeId}/disable`.replace(
        `{${'routeId'}}`,
        encodeURIComponent(String(routeId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceEnableRoute: async (routeId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'routeId' is not null or undefined
      assertParamExists('headscaleServiceEnableRoute', 'routeId', routeId);
      const localVarPath = `/api/v1/routes/{routeId}/enable`.replace(
        `{${'routeId'}}`,
        encodeURIComponent(String(routeId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1ExpireApiKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceExpireApiKey: async (
      body: V1ExpireApiKeyRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceExpireApiKey', 'body', body);
      const localVarPath = `/api/v1/apikey/expire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceExpireMachine: async (
      machineId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceExpireMachine', 'machineId', machineId);
      const localVarPath = `/api/v1/machine/{machineId}/expire`.replace(
        `{${'machineId'}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {V1ExpirePreAuthKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceExpirePreAuthKey: async (
      body: V1ExpirePreAuthKeyRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceExpirePreAuthKey', 'body', body);
      const localVarPath = `/api/v1/preauthkey/expire`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetMachine: async (
      machineId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceGetMachine', 'machineId', machineId);
      const localVarPath = `/api/v1/machine/{machineId}`.replace(
        `{${'machineId'}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetMachineRoutes: async (
      machineId: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceGetMachineRoutes', 'machineId', machineId);
      const localVarPath = `/api/v1/machine/{machineId}/routes`.replace(
        `{${'machineId'}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary --- Route start ---
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetRoutes: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/routes`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary --- User start ---
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetUser: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'name' is not null or undefined
      assertParamExists('headscaleServiceGetUser', 'name', name);
      const localVarPath = `/api/v1/user/{name}`.replace(`{${'name'}}`, encodeURIComponent(String(name)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListApiKeys: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/apikey`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListMachines: async (user?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/machine`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (user !== undefined) {
        localVarQueryParameter['user'] = user;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListPreAuthKeys: async (
      user?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/preauthkey`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (user !== undefined) {
        localVarQueryParameter['user'] = user;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListUsers: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceMoveMachine: async (
      machineId: string,
      user?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceMoveMachine', 'machineId', machineId);
      const localVarPath = `/api/v1/machine/{machineId}/user`.replace(
        `{${'machineId'}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (user !== undefined) {
        localVarQueryParameter['user'] = user;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [user]
     * @param {string} [key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceRegisterMachine: async (
      user?: string,
      key?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/machine/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (user !== undefined) {
        localVarQueryParameter['user'] = user;
      }

      if (key !== undefined) {
        localVarQueryParameter['key'] = key;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {string} newName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceRenameMachine: async (
      machineId: string,
      newName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceRenameMachine', 'machineId', machineId);
      // verify required parameter 'newName' is not null or undefined
      assertParamExists('headscaleServiceRenameMachine', 'newName', newName);
      const localVarPath = `/api/v1/machine/{machineId}/rename/{newName}`
        .replace(`{${'machineId'}}`, encodeURIComponent(String(machineId)))
        .replace(`{${'newName'}}`, encodeURIComponent(String(newName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} oldName
     * @param {string} newName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceRenameUser: async (
      oldName: string,
      newName: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'oldName' is not null or undefined
      assertParamExists('headscaleServiceRenameUser', 'oldName', oldName);
      // verify required parameter 'newName' is not null or undefined
      assertParamExists('headscaleServiceRenameUser', 'newName', newName);
      const localVarPath = `/api/v1/user/{oldName}/rename/{newName}`
        .replace(`{${'oldName'}}`, encodeURIComponent(String(oldName)))
        .replace(`{${'newName'}}`, encodeURIComponent(String(newName)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} machineId
     * @param {HeadscaleServiceSetTagsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceSetTags: async (
      machineId: string,
      body: HeadscaleServiceSetTagsRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'machineId' is not null or undefined
      assertParamExists('headscaleServiceSetTags', 'machineId', machineId);
      // verify required parameter 'body' is not null or undefined
      assertParamExists('headscaleServiceSetTags', 'body', body);
      const localVarPath = `/api/v1/machine/{machineId}/tags`.replace(
        `{${'machineId'}}`,
        encodeURIComponent(String(machineId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
      localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration);

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HeadscaleServiceApi - functional programming interface
 * @export
 */
export const HeadscaleServiceApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HeadscaleServiceApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary --- ApiKeys start ---
     * @param {V1CreateApiKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceCreateApiKey(
      body: V1CreateApiKeyRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateApiKeyResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceCreateApiKey(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceCreateApiKey']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary --- PreAuthKeys start ---
     * @param {V1CreatePreAuthKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceCreatePreAuthKey(
      body: V1CreatePreAuthKeyRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreatePreAuthKeyResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceCreatePreAuthKey(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceCreatePreAuthKey']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {V1CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceCreateUser(
      body: V1CreateUserRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CreateUserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceCreateUser(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceCreateUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary --- Machine start ---
     * @param {V1DebugCreateMachineRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceDebugCreateMachine(
      body: V1DebugCreateMachineRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DebugCreateMachineResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceDebugCreateMachine(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceDebugCreateMachine']?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceDeleteMachine(
      machineId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceDeleteMachine(machineId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceDeleteMachine']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceDeleteRoute(
      routeId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceDeleteRoute(routeId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceDeleteRoute']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceDeleteUser(
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceDeleteUser(name, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceDeleteUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceDisableRoute(
      routeId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceDisableRoute(routeId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceDisableRoute']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceEnableRoute(
      routeId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceEnableRoute(routeId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceEnableRoute']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {V1ExpireApiKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceExpireApiKey(
      body: V1ExpireApiKeyRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceExpireApiKey(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceExpireApiKey']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceExpireMachine(
      machineId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ExpireMachineResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceExpireMachine(machineId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceExpireMachine']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {V1ExpirePreAuthKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceExpirePreAuthKey(
      body: V1ExpirePreAuthKeyRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceExpirePreAuthKey(body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceExpirePreAuthKey']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceGetMachine(
      machineId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetMachineResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceGetMachine(machineId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceGetMachine']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceGetMachineRoutes(
      machineId: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetMachineRoutesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceGetMachineRoutes(machineId, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceGetMachineRoutes']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary --- Route start ---
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceGetRoutes(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetRoutesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceGetRoutes(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceGetRoutes']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @summary --- User start ---
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceGetUser(
      name: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1GetUserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceGetUser(name, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceGetUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceListApiKeys(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListApiKeysResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceListApiKeys(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceListApiKeys']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceListMachines(
      user?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListMachinesResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceListMachines(user, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceListMachines']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceListPreAuthKeys(
      user?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListPreAuthKeysResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceListPreAuthKeys(user, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceListPreAuthKeys']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceListUsers(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1ListUsersResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceListUsers(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceListUsers']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceMoveMachine(
      machineId: string,
      user?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1MoveMachineResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceMoveMachine(machineId, user, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceMoveMachine']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} [user]
     * @param {string} [key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceRegisterMachine(
      user?: string,
      key?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RegisterMachineResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceRegisterMachine(user, key, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceRegisterMachine']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {string} newName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceRenameMachine(
      machineId: string,
      newName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RenameMachineResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceRenameMachine(
        machineId,
        newName,
        options
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceRenameMachine']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} oldName
     * @param {string} newName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceRenameUser(
      oldName: string,
      newName: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1RenameUserResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceRenameUser(oldName, newName, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceRenameUser']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} machineId
     * @param {HeadscaleServiceSetTagsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async headscaleServiceSetTags(
      machineId: string,
      body: HeadscaleServiceSetTagsRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SetTagsResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.headscaleServiceSetTags(machineId, body, options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap['HeadscaleServiceApi.headscaleServiceSetTags']?.[localVarOperationServerIndex]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * HeadscaleServiceApi - factory interface
 * @export
 */
export const HeadscaleServiceApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HeadscaleServiceApiFp(configuration);
  return {
    /**
     *
     * @summary --- ApiKeys start ---
     * @param {V1CreateApiKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceCreateApiKey(body: V1CreateApiKeyRequest, options?: any): AxiosPromise<V1CreateApiKeyResponse> {
      return localVarFp.headscaleServiceCreateApiKey(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary --- PreAuthKeys start ---
     * @param {V1CreatePreAuthKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceCreatePreAuthKey(
      body: V1CreatePreAuthKeyRequest,
      options?: any
    ): AxiosPromise<V1CreatePreAuthKeyResponse> {
      return localVarFp.headscaleServiceCreatePreAuthKey(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1CreateUserRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceCreateUser(body: V1CreateUserRequest, options?: any): AxiosPromise<V1CreateUserResponse> {
      return localVarFp.headscaleServiceCreateUser(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary --- Machine start ---
     * @param {V1DebugCreateMachineRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDebugCreateMachine(
      body: V1DebugCreateMachineRequest,
      options?: any
    ): AxiosPromise<V1DebugCreateMachineResponse> {
      return localVarFp.headscaleServiceDebugCreateMachine(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDeleteMachine(machineId: string, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceDeleteMachine(machineId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDeleteRoute(routeId: string, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceDeleteRoute(routeId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDeleteUser(name: string, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceDeleteUser(name, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceDisableRoute(routeId: string, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceDisableRoute(routeId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceEnableRoute(routeId: string, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceEnableRoute(routeId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1ExpireApiKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceExpireApiKey(body: V1ExpireApiKeyRequest, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceExpireApiKey(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceExpireMachine(machineId: string, options?: any): AxiosPromise<V1ExpireMachineResponse> {
      return localVarFp.headscaleServiceExpireMachine(machineId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {V1ExpirePreAuthKeyRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceExpirePreAuthKey(body: V1ExpirePreAuthKeyRequest, options?: any): AxiosPromise<object> {
      return localVarFp.headscaleServiceExpirePreAuthKey(body, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetMachine(machineId: string, options?: any): AxiosPromise<V1GetMachineResponse> {
      return localVarFp.headscaleServiceGetMachine(machineId, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetMachineRoutes(machineId: string, options?: any): AxiosPromise<V1GetMachineRoutesResponse> {
      return localVarFp
        .headscaleServiceGetMachineRoutes(machineId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary --- Route start ---
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetRoutes(options?: any): AxiosPromise<V1GetRoutesResponse> {
      return localVarFp.headscaleServiceGetRoutes(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary --- User start ---
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceGetUser(name: string, options?: any): AxiosPromise<V1GetUserResponse> {
      return localVarFp.headscaleServiceGetUser(name, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListApiKeys(options?: any): AxiosPromise<V1ListApiKeysResponse> {
      return localVarFp.headscaleServiceListApiKeys(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListMachines(user?: string, options?: any): AxiosPromise<V1ListMachinesResponse> {
      return localVarFp.headscaleServiceListMachines(user, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListPreAuthKeys(user?: string, options?: any): AxiosPromise<V1ListPreAuthKeysResponse> {
      return localVarFp.headscaleServiceListPreAuthKeys(user, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceListUsers(options?: any): AxiosPromise<V1ListUsersResponse> {
      return localVarFp.headscaleServiceListUsers(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {string} [user]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceMoveMachine(machineId: string, user?: string, options?: any): AxiosPromise<V1MoveMachineResponse> {
      return localVarFp
        .headscaleServiceMoveMachine(machineId, user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} [user]
     * @param {string} [key]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceRegisterMachine(
      user?: string,
      key?: string,
      options?: any
    ): AxiosPromise<V1RegisterMachineResponse> {
      return localVarFp.headscaleServiceRegisterMachine(user, key, options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {string} newName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceRenameMachine(
      machineId: string,
      newName: string,
      options?: any
    ): AxiosPromise<V1RenameMachineResponse> {
      return localVarFp
        .headscaleServiceRenameMachine(machineId, newName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} oldName
     * @param {string} newName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceRenameUser(oldName: string, newName: string, options?: any): AxiosPromise<V1RenameUserResponse> {
      return localVarFp
        .headscaleServiceRenameUser(oldName, newName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} machineId
     * @param {HeadscaleServiceSetTagsRequest} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    headscaleServiceSetTags(
      machineId: string,
      body: HeadscaleServiceSetTagsRequest,
      options?: any
    ): AxiosPromise<V1SetTagsResponse> {
      return localVarFp.headscaleServiceSetTags(machineId, body, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * HeadscaleServiceApi - object-oriented interface
 * @export
 * @class HeadscaleServiceApi
 * @extends {BaseAPI}
 */
export class HeadscaleServiceApi extends BaseAPI {
  /**
   *
   * @summary --- ApiKeys start ---
   * @param {V1CreateApiKeyRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceCreateApiKey(body: V1CreateApiKeyRequest, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceCreateApiKey(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary --- PreAuthKeys start ---
   * @param {V1CreatePreAuthKeyRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceCreatePreAuthKey(body: V1CreatePreAuthKeyRequest, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceCreatePreAuthKey(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {V1CreateUserRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceCreateUser(body: V1CreateUserRequest, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceCreateUser(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary --- Machine start ---
   * @param {V1DebugCreateMachineRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceDebugCreateMachine(body: V1DebugCreateMachineRequest, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceDebugCreateMachine(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceDeleteMachine(machineId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceDeleteMachine(machineId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} routeId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceDeleteRoute(routeId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceDeleteRoute(routeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceDeleteUser(name: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceDeleteUser(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} routeId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceDisableRoute(routeId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceDisableRoute(routeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} routeId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceEnableRoute(routeId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceEnableRoute(routeId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {V1ExpireApiKeyRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceExpireApiKey(body: V1ExpireApiKeyRequest, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceExpireApiKey(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceExpireMachine(machineId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceExpireMachine(machineId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {V1ExpirePreAuthKeyRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceExpirePreAuthKey(body: V1ExpirePreAuthKeyRequest, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceExpirePreAuthKey(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceGetMachine(machineId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceGetMachine(machineId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceGetMachineRoutes(machineId: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceGetMachineRoutes(machineId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary --- Route start ---
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceGetRoutes(options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceGetRoutes(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary --- User start ---
   * @param {string} name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceGetUser(name: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceGetUser(name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceListApiKeys(options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceListApiKeys(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceListMachines(user?: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceListMachines(user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceListPreAuthKeys(user?: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceListPreAuthKeys(user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceListUsers(options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceListUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {string} [user]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceMoveMachine(machineId: string, user?: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceMoveMachine(machineId, user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} [user]
   * @param {string} [key]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceRegisterMachine(user?: string, key?: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceRegisterMachine(user, key, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {string} newName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceRenameMachine(machineId: string, newName: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceRenameMachine(machineId, newName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} oldName
   * @param {string} newName
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceRenameUser(oldName: string, newName: string, options?: RawAxiosRequestConfig) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceRenameUser(oldName, newName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} machineId
   * @param {HeadscaleServiceSetTagsRequest} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HeadscaleServiceApi
   */
  public headscaleServiceSetTags(
    machineId: string,
    body: HeadscaleServiceSetTagsRequest,
    options?: RawAxiosRequestConfig
  ) {
    return HeadscaleServiceApiFp(this.configuration)
      .headscaleServiceSetTags(machineId, body, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
